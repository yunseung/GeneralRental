/** * <pre> * 파일명 	: CommonDate.java * 생성자 	: calix * 생성일자	: 2013. 3. 5. * </pre> * <p/> * ************************************************************************************************** 수정자 수정일자 수정내용 * ************************************************************************************************** Calix 2013년 03월 05일 */package com.lotterental.common.util;import android.content.Context;import java.util.Calendar;import java.util.Locale;public class DateUtil {    // 주    public final static String[] WEEK_TYPE1 = {            "일", "월", "화", "수", "목", "금", "토"};    public final static String[] WEEK_TYPE2 = {            "월", "화", "수", "목", "금", "토", "일"};    public final static String[] WEEK_TYPE3 = {            "MON", "TUS", "WED", "THU", "FRI", "SAT", "SUN"};    public final static String[] WEEK_TYPE4 = {            "SUN", "MON", "TUS", "WED", "THU", "FRI", "SAT"};    // 각 달의 마지막달    protected final static int[] num = {            31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};    protected final int SUNDAY = 1;    protected final int MONDAY = 2;    protected final int TUESDAY = 3;    protected final int WEDNESDAY = 4;    protected final int THURSDAY = 5;    protected final int FRIDAY = 6;    protected final int SATURDAY = 7;    /********************** 전역 변수 셋팅 시작 **********************************/    protected Context context;    // 현재 년 월 일    protected int year;    protected int month;    protected int day;    protected int width;    protected int height;    /********************** 전역 변수 셋팅 끝 ***********************************/    /***************** 메소드 선언 시작 ******************************************/    /**     * <pre>     * 현재 시간을 불러온다. - Type에 따라 12시간 또는 24시간으로 넘겨줌 <br>     * </pre>     *     * @since 2013. 11. 6.     * @version v1.0.0     * @author Calix     * @param _type Calendar.HOUR = 12시간 <br>     *            Calendar.HOUR_OF_DAY = 24시간 <br>     * @return <pre>     * int 형 배열로 넘겨준다.     * int[0] = HOUR     * int[1] = MINUTE     * </pre>     */    public static int[] getNowTime(int _type) {        Calendar calendar = Calendar.getInstance(Locale.KOREA);        int[] nowTime = new int[2];        nowTime[0] = calendar.get(_type);        nowTime[1] = calendar.get(Calendar.MINUTE);        return nowTime;    }    /**     * <pre>     * 현재 시간을 String 형식으로 반환한다.     * </pre>     * @since 2013. 11. 6.     * @version v1.0.0     * @author Calix     * @param _type Calendar.HOUR = 12시간 <br>     *            Calendar.HOUR_OF_DAY = 24시간 <br>     * @return     * <pre></pre>     */    public static String getNowTimeStr(int _type) {        int[] time = getNowTime(_type);        return String.format("%02d%02d", time[0], time[1]);    }    /************************************************     *     * 오늘 날짜를 불러온다.     *     * @MethodName getNowDate()     * @MethodNotice - int 형 배열로 넘겨준다. - int[0] = YEAR - int[1] = MONTH - int[2] = DAY     */    public static int[] getNowDate() {        Calendar calendar = Calendar.getInstance(Locale.KOREA);        int[] nowDate = new int[3];        nowDate[0] = calendar.get(Calendar.YEAR);        nowDate[1] = calendar.get(Calendar.MONTH);        nowDate[2] = calendar.get(Calendar.DATE);        return nowDate;    }    /**     * <pre>     * 오늘 날짜를 String 형식으로 반환     * </pre>     *     * @since 2013. 11. 6.     * @version v1.0.0     * @author Calix     * @return <pre></pre>     */    public static String getNowDateStr() {        int[] date = getNowDate();        return String.format("%04d-%02d-%02d", date[0], date[1] + 1, date[2]);    }    public static String getNowDateTimeStr() {        int[] date = getNowDate();        int[] time = getNowTime(Calendar.HOUR_OF_DAY);        return String.format("%04d-%02d-%02d %02d:%02d", date[0], date[1] + 1, date[2], time[0], time[1]);    }    /**     * 날짜 + 요일 형식으로 반환     * @return     */    public static String getNowDateWeekStr() {        int[] date = getNowDate();        return String.format("%04d-%02d-%02d(%s)", date[0], date[1] + 1, date[2], WEEK_TYPE1[getDayWeek(date[0], date[1], date[2]) - 1]);    }    /**     * 날짜 + 요일 시간 형식으로 반환     * @return     */    public static String getNowDateTimeWeekStr() {        int[] date = getNowDate();        int[] time = getNowTime(Calendar.HOUR_OF_DAY);        return String.format("%04d-%02d-%02d(%s) %02d:%02d", date[0], date[1] + 1, date[2], WEEK_TYPE1[getDayWeek(date[0], date[1], date[2]) - 1], time[0], time[1]);    }    /**     * <pre>     * 현재 날짜로 부터의 _nPlusDay 만큼 지나간 시간을 구한다.     * </pre>     *     * @since 2013. 10. 18.     * @version v1.0.0     * @author Calix     * @param _nPlusDay : 지나간 시간     * @return <pre>     * int[] 반환     * [0] = 년     * [1] = 월     * [2] = 일     * [3] = 24시간     * [4] = 분     * </pre>     */    public static int[] getNowDatePlusDateTime(int _nPlusDay) {        long time = _nPlusDay * 24 * 60 * 60 * 1000;        Calendar calendar = Calendar.getInstance(Locale.KOREA);        long plusTime = calendar.getTimeInMillis() + time;        calendar.setTimeInMillis(plusTime);        int[] arrDateTime = new int[5];        arrDateTime[0] = calendar.get(Calendar.YEAR);        arrDateTime[1] = calendar.get(Calendar.MONTH) + 1;        arrDateTime[2] = calendar.get(Calendar.DATE);        arrDateTime[3] = calendar.get(Calendar.HOUR_OF_DAY);        arrDateTime[4] = calendar.get(Calendar.MINUTE);        return arrDateTime;    }    /**     * <pre>     * 현재 날짜로 부터의 _nPlusMonth 만큼 계산해서 yyyyMMdd 형식으로 반환한다.     * </pre>     *     * @since 2016. 04. 01.     * @version v1.0.0     * @author KSW     * @param _nPlusMonth     * @return <pre>     * String 반환(yyyyMMdd)     * </pre>     */    public static String getNowDatePlusMonth(int _nPlusMonth) {        int[] arrDateTime = getNowDateMonthTime(_nPlusMonth);        String Date = String.format("%04d%02d%02d", arrDateTime[0], arrDateTime[1], arrDateTime[2]);        return Date;    }    /**     * <pre>     * 현재 날짜로 부터의 _nMinusDay 만큼 지나간 시간을 구한다.     * </pre>     *     * @since 2016. 04. 01.     * @version v1.0.0     * @author KSW     * @param _nMinusMonth : 지나간 시간     * @return <pre>     * int[] 반환     * [0] = 년     * [1] = 월     * [2] = 일     * [3] = 24시간     * [4] = 분     * </pre>     */    public static int[] getNowDateMonthTime(int _nMinusMonth) {        Calendar calendar = Calendar.getInstance(Locale.KOREA);        calendar.add(calendar.MONTH, -_nMinusMonth);        int[] arrDateTime = new int[5];        arrDateTime[0] = calendar.get(Calendar.YEAR);        arrDateTime[1] = calendar.get(Calendar.MONTH) + 1;        arrDateTime[2] = calendar.get(Calendar.DATE);        arrDateTime[3] = calendar.get(Calendar.HOUR_OF_DAY);        arrDateTime[4] = calendar.get(Calendar.MINUTE);        return arrDateTime;    }    /**     * <pre>     * 현재 날짜로 부터의 _nPlusDay 만큼 계산해서 yyyyMMdd 형식으로 반환한다.     * </pre>     *     * @since 2013. 10. 18.     * @version v1.0.0     * @author Calix     * @param _nPlusDay     * @return <pre>     * String 반환(yyyyMMdd)     * </pre>     */    public static String getNowDatePlusDate(int _nPlusDay) {        int[] arrDateTime = getNowDatePlusDateTime(_nPlusDay);        String Date = String.format("%04d%02d%02d", arrDateTime[0], arrDateTime[1], arrDateTime[2]);        return Date;    }    /**************************************************     *     * 윤달을 계산해서 마지막 날을 넘겨준다.     *     * @MethodName leapYear(int _month)     * @MethodNotice - _year : 마지막 날을 구할 년도 - _month : 마지막 날을 구할 달     */    public static int getLastDay(int _year, int _month) {        if (_month == -1)            _month = num.length - 1;        else if (_month == num.length)            _month = 0;        int lastDay = num[_month];        if (_month == Calendar.FEBRUARY && (!((_year % 4) == 0) && ((_year % 100) == 0) || !((_year % 400) == 0)))            lastDay = 29;        return lastDay;    }    /***************************************************     *     * 현재 년도 달의 1일이 무슨 요일인지 구해준다.     *     * @MethodName getFirstDay     * @MethodNotice - _year : 구할려고 하는 년도 - _month : 구할려고하는 월     */    public static int getFirstWeek(int _year, int _month) {        return getDayWeek(_year, _month, 1);    }    /***************************************************     *     * 지정된 일자가 무슨 요일인지 구해준다.     *     * @MethodName getDayWeek(int _year, int _month, int _day)     * @MethodNotice - 반환값 SUNDAY = 1 MONDAY = 2 ..... SATURDAY = 7     */    public static int getDayWeek(int _year, int _month, int _day) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, _year);        calendar.set(Calendar.MONTH, _month);        calendar.set(Calendar.DATE, _day);        return calendar.get(Calendar.DAY_OF_WEEK);    }    /***************************************************     *     * 현재 달의 주가 몇개 인지 구한다.     *     * @MethodName getTotalWeek(int _year, int _month)     * @MethodNotice - _year : 구할려고 하는 년도 - _month : 구할려고하는 월     */    public static int getTotalWeek(int _year, int _month) {        // 1부터 시작해서 0부터 시작하도록 -1 해줌        int firstWeek = getFirstWeek(_year, _month) - 1;        int lastDay = getLastDay(_year, _month);        int totalWeek = 0;        // 요일 + 총일수를 더한후 7로 나눈 나머지가 0이면 나눈값을 넘겨준다.        if ((firstWeek + lastDay) % 7 == 0)            totalWeek = (firstWeek + lastDay) / 7;            // 요일 + 총일수를 더한후 7로 나눈 나머지가 0보다 크면 나눈값 + 1을 넘겨준다.        else if ((firstWeek + lastDay) % 7 > 0)            totalWeek = (firstWeek + lastDay) / 7 + 1;        return totalWeek;    }    /***********************************************************     *     * 현재 날짜가 한달의 몇번째주인지 반환해준다.     *     * @MethodName getWeekOfMonth(int _year, int _month, int _day)     * @MethodNotice     */    public static int getWeekOfMonth(int _year, int _month, int _day) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, _year);        calendar.set(Calendar.MONTH, _month);        calendar.set(Calendar.DATE, _day);        return (calendar.get(Calendar.WEEK_OF_MONTH) - 1);    }    /**     * <pre>     * yyyyMMdd 형식의 날짜를 입력받으면 int[] 배열로 반환한다.     * </pre>     *     * @since 2013. 10. 18.     * @version v1.0.0     * @author Calix     * @param _date     * @return <pre>     * int[] 반환     * int[0] : 년     * int[1] : 월     * int[2] : 일     * </pre>     */    public static int[] getDateArr(String _date) {        if (_date == null)            return null;        String strDate = _date.replaceAll("\\p{Punct}", "");        strDate = strDate.replaceAll("\\p{Space}", "");        if (strDate == null || strDate.length() != 8)            return null;        int[] arrDate = new int[3];        arrDate[0] = Integer.parseInt(strDate.substring(0, 4));        arrDate[1] = Integer.parseInt(strDate.substring(4, 6));        arrDate[2] = Integer.parseInt(strDate.substring(6));        return arrDate;    }    /**     * <pre>     * HHmm 형식의 시간을 입력받으면 int[] 배열로 반환한다.     * </pre>     *     * @since 2013. 10. 23.     * @version v1.0.0     * @author Calix     * @param _time     * @return <pre>     * int[] 반환     * int[0] : 시     * int[1] : 분     * </pre>     */    public static int[] getTimeArr(String _time) {        if (_time == null)            return null;        String time = _time.replaceAll("\\p{Punct}", "");        time = time.replaceAll("\\p{Space}", "");        if (time == null || time.length() != 4)            return null;        int[] arrTime = new int[2];        arrTime[0] = Integer.parseInt(time.substring(0, 2));        arrTime[1] = Integer.parseInt(time.substring(2));        return arrTime;    }    /**     *     * <pre>     * TODO 날짜형식을 type 값에 따라 반환한다.     *      ex) type = "-" 이것이라면     *      XXXX-XX-XX 반환     *      반환값 [ "" : _date가 형식에 맞지않음 ]     * </pre>     *     * @메소드명 : dateFormat     * @생성일자 : 2013. 3. 25.     * @개발자 : calix ******************************************************* 수정자 수정일자 수정내용 *******************************************************     *      calix 2013. 3. 25. Create     */    public static String getDateFormat(String _date, String _type) {        if (_date == null || _date.length() != 8)            return "";        String tmpDate = _date;        tmpDate = tmpDate.substring(0, 4) + _type + tmpDate.substring(4, 6) + _type + tmpDate.substring(6);        return tmpDate;    }}